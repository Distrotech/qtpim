/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt PIM Module.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/


/*!

\page contactsasync.html

\title Contacts Asynchronous API

\tableofcontents


\section1 Introduction

The Contacts Asynchronous API enables a client to asynchronously fetch, update, or remove
contact and relationship data from a contact manager.  Use of the asynchronous API
offers the programmer greater flexibility when requesting information from remote or
slow local datastores.

\section1 Using the API

The asynchronous API offered by the Contacts module is available through classes
derived from the QContactAbstractRequest class.  It consists of two major sections:
\list
  \li Contact Manipulation
  \li Relationship Manipulation
\endlist

The functionality offered by the synchronous API in these two categories is also
available through the asynchronous API.  There is one category of functionality
which is not provided by the asynchronous API which is provided by the synchronous
API: some information and reporting functionality is only provided through the
synchronous API.

For detailed information about the information and reporting functionality provided,
please refer to the documentation for the \l{Contacts Synchronous API}.

The functions to set and retrieve the id of the self-contact are also only provided by
the synchronous API.

\section2 Contact Manipulation

The most common type of operation that clients will perform involves retrieval or modification of contacts.
For in-depth information about contact manipulation, please refer to the \l{Contacts Synchronous API}.

There are four different types of operation which are supported by the asynchronous API:
\list
  \li Fetch contact ids
  \li Fetch contacts
  \li Save contacts (create or update)
  \li Remove contacts
\endlist

These operations are supported via the QContactIdFetchRequest, QContactFetchRequest,
QContactSaveRequest and QContactRemoveRequest classes, respectively.

The synchronous API offered by the QContactManager class to allow manipulation of contacts consists
of the following functions:
\list
  \li contactIds(const QList<QContactSortOrder>& sortOrders = QList<QContactSortOrder>()) const
  \li contactIds(const QContactFilter& filter, const QList<QContactSortOrder>& sortOrders = QList<QContactSortOrder>()) const
  \li contacts(const QList<QContactSortOrder>& sortOrders = QList<QContactSortOrder>(), const QContactFetchHint& fetchHint = QContactFetchHint()) const
  \li contacts(const QContactFilter& filter, const QList<QContactSortOrder>& sortOrders = QList<QContactSortOrder>(), const QContactFetchHint& fetchHint = QContactFetchHint()) const
  \li saveContacts(QList<QContact>* contacts, QMap<int, QContactManager::Error>* errorMap)
  \li removeContacts(QList<QContactId>* contactIds, QMap<int, QContactManager::Error>* errorMap)
\endlist

\section3 \b{Relationship Manipulation}

Contacts may be related in various ways.  The contacts API allows clients to define relationships between contacts.
For in-depth information about relationship manipulation, please refer to the \l{Contacts Synchronous API}.
Support for relationships is backend specific.
There are three different types of operation which are supported by the asynchronous API:
\list
  \li Fetch relationships
  \li Save relationships (create or update, if supported by the backend)
  \li Remove relationships (if supported by the backend)
\endlist

These operations are supported via the QContactRelationshipFetchRequest,
QContactRelationshipSaveRequest and QContactRelationshipRemoveRequest classes respectively.

The synchronous API offered by the QContactManager class to allow manipulation of relationships
consists of the following functions:
\list
  \li relationships(const QContactId& participantId, QContactRelationshipFilter::Role role = QContactRelationshipFilter::Either) const;
  \li relationships(const QString& relationshipType = QString(), const QContactId& participantId = QContactId(), QContactRelationshipFilter::Role role = QContactRelationshipFilter::Either) const;
  \li saveRelationship(QContactRelationship* relationship);
  \li saveRelationships(QList<QContactRelationship>* relationships);
  \li removeRelationship(const QContactRelationship& relationship);
  \li removeRelationships(const QList<QContactRelationship>& relationships);
\endlist

\section1 Examples Of Usage

\section2 Fetching Contacts

The client sets up a request for contacts matching a specific criteria
from a particular manager.

Results from the request will be displayed to the user as they are
received.

    \snippet snippets/qtcontactsdocsample/qtcontactsdocsample.cpp Asynchronous contact request

\section2 Other Asynchronous Operations

All other asynchronous operations are performed in a similar manner to the
previous example. A request of the desired type (which is derived from
QContactAbstractRequest) is created, certain criteria are set which
determine the intent of the request, and the signals of the request
are connected to slots which deals with the results.  The request can then
be started.

*/
