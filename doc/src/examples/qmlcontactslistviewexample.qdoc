/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt PIM Module.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example qmlcontactslistview
    \title Qt Quick Contacts List View Example

    \tableofcontents

    \section1 Contacts List

    This example shows how to write a simple Contacts browsing application with the \l {Contacts QML API}{Contacts QML API}

    \section2 Motivation
    This application was written to provide an example to developers of how to use the Qt Quick Contacts APIs.

    It provides an example of how to use the Qt Contacts library to:
    \list
    \o import new contact information from vCard files
    \o select a backend for volatile memory or persistent storage
    \o list the stored Contacts information
    \o add Contacts
    \o edit Contacts
    \o remove Contacts
    \endlist

    \section2 Use Case
    Its is common necessity for people to keep well organized and persistent lists of all their friends, relatives, business partners and etc.
    All these contacts can have associate information such as phone numbers, email addresses, relations between other contacts.

    This sample application provides a simple contacts browser that allows users to retrieve all their Contacts and information associated
    with them. Users can add new contacts, modify or delete existing ones.

    \section2 Interface
    The interface is organized into a QML List View, showing all the available contacts.
    Contacts can be added or modified using the buttons at the bottom of the contact list.
    Selecting the contact is simply done by clicking the mouse on the desired list element,
    that opens the selected contact in editing view.

    Here we see the \l {ContactModel} used with a QML List View to show a basic information of contacts.

    \image qmlcontactslistview-main.png

    In edit mode you can delete a contact by using delete button at the bottom of the window or you can modify a contact's details just by
    entering a new value in text input fields. Modified values are indicated in red color and they must be saved to take affect or changes
    can be discarded by using cancel button which is also placed at the bottom of the window.

    Here we can see an example of how a contact looks when opened in an editing view.

    \image qmlcontactslistview-edit.png

    This example application is designed to introduce very basic usage of the API and get you stared with QtContacts library.
*/
