/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt PIM Module.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/


/*!
\title Qt Organizer C++ API
\page organizerclasses.html

    The Organizer API allows access to calendar event information.
    For more details, see the \l {Qt Organizer Overview}.
    The following are the classes involved in this API.

    \generatelist{classesbymodule QtOrganizer}

\section2 Main Classes

\annotatedlist organizer-main

\section2 QOrganizerItemDetail Leaf Classes

Several subclasses of \l{QOrganizerItemDetail} are provided as part of the
Organizer API.  They are general in design but are intended
to fulfill specific use-cases.  Please note that certain backends may
choose not to support one or more of these subclasses as they appear here;
they may offer their own which provide similar functionality.

\annotatedlist organizer-details

\section2 Asynchronous Requests

You may use either the \l{Qt Organizer Synchronous API}{synchronous}
or \l{Qt Organizer Asynchronous API}{asynchronous} API to access
functionality provided by a manager backend. The asynchronous API is
offered through subclasses of the \l{QOrganizerAbstractRequest} class:

\annotatedlist organizer-requests

\section2 Organizer Item Selection And Sorting

You may select an organizer item by specifying a unique item id, or by
supplying a \l{QOrganizerItemFilter} which matches the item or items they
wish to select.  The various derivatives of \l{QOrganizerItemFilter} allow for
fine-grained and flexible selection of organizer data according to various
criteria:

\annotatedlist organizer-filters


A client can also request that the results of such a selection be sorted,
by passing a \l{QOrganizerItemSortOrder} (or list of sort orders) to the
manager.

\section2 Implementing Backends

A backend implementor must implement the following interfaces:

\annotatedlist organizer-backends

For more information on this topic, see please see the documentation on
\l{Qt Organizer Manager Engines}{implementing manager engines}.

\section2 Synchronization and Serialization

The organizer API is used by the
\l {Qt Versit C++ API}* module.  It allows
serialization of a QOrganizerItem into an iCalendar document, and vice versa.

[*] Versit \reg is a trademark of the Internet Mail Consortium.

\section1 QML Elements

For details on the QML support provided for the Organizer API see the documentation for the
\l {Organizer QML API}(Qt Organizer QML API}.


*/
